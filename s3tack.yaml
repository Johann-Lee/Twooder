# Create an S3 Bucket that hosts a React app
# Use AWS CLI to execute the file like the below snippet
# aws cloudformation deploy --template-file ./cloudformation_basic.yml --stack-name basic --parameter-overrides BucketName=<BUCKET_NAME>

AWSTemplateFormatVersion: 2010-09-09

Parameters: 
  BucketName:
    Description: Unique name for your bucket. This will be in the S3 url to your React app.
    Type: String
  TableName:
    Description: Database Table Name
    Type: String
  BearerToken:
    Description: Bear Token
    Type: String

Resources:
  # Create an S3 Bucket that serves a static website (i.e. React app)
  MyBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: PublicRead 
      WebsiteConfiguration: # this makes the S3 Bucket a static website/app
        IndexDocument: index.html # default object served when visiting S3 domain
        ErrorDocument: index.html # just send to app, let React handle errors and routing

  # Add a Bucket Policy that lets public visitors access the web app
  MyBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MyBucket # attach to bucket being created
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement: # lets the public access/view the contents of your Bucket, i.e. web app
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*' # wildcard, allow all requests
            Action: 's3:GetObject'
            Resource: !Join ['', ['arn:aws:s3:::', !Ref MyBucket, /*]]

  RestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: twooder-api

  GetUsers:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !GetAtt RestApi.RootResourceId
      HttpMethod: POST
      RequestParameters:
        method.request.querystring.username: true
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TwitterApiLambda.Arn}/invocations'

  Deployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref RestApi
      StageName: v1
    DependsOn:
      - GetUsers

  TwitterApiLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 15
      Environment:
        Variables:
          TableName: !Ref TableName
          BearerToken: !Ref BearerToken
      Code:
        ZipFile: |
          import requests
          import boto3
          import os
          import json


          def lambda_handler(event, context):
            table_name = os.environ['TableName']
            db = boto3.client('dynamodb')
            result = db.list_tables()
            if 'TableNames' not in result or len(result['TableNames']) == 0 or table_name in result['TableNames']:
              response = db.create_table(
                AttributeDefinitions=[
                  {
                    'AttributeName': 'Username',
                    'AttributeType': 'S'
                  }
                ],
                TableName=table_name,
                KeySchema=[
                  {
                    'AttributeName': 'Username',
                    'KeyType': 'HASH'
                  }
                ],
                ProvisionedThroughput={
                  'ReadCapacityUnits': 5,
                  'WriteCapacityUnits': 5
                }
              )

            bearer_token = 'Bearer ' + os.environ['BearerToken']
            username = event['queryStringParameters']['username']

            res = requests.get("https://api.twitter.com/2/users/by?",
                               params={'usernames': username},
                               headers={'Authorization': bearer_token})

            user = res.json()['data'][0]

            if user is None:
              return {'statusCode': 400, 'body': None}

            user_id = user['id']

            if user_id is None:
              return {'statusCode': 400, 'body': None}

            url = "https://api.twitter.com/2/users/" + user_id + "/tweets?max_results=30"
            res = requests.get(url, headers={'Authorization': bearer_token})

            print(res)
            tweets = res.json()['data']

            comprehend = boto3.client('comprehend')

            total_positive = 0
            total_negative = 0
            total_neutral = 0

            for tweet in tweets:
              comprehend_result = comprehend.detect_sentiment(Text=tweet['text'], LanguageCode='en')
              total_positive = total_positive + comprehend_result['SentimentScore']['Positive']
              total_negative = total_negative + comprehend_result['SentimentScore']['Negative']
              total_neutral = total_neutral + comprehend_result['SentimentScore']['Neutral']

            positive = total_positive / len(tweets)
            negative = total_negative / len(tweets)
            netural = total_neutral / len(tweets)

            return {
              'statusCode': 200,
              'body': json.dumps({
                'positive': positive,
                'negative': negative,
                'neutral': netural
              })
            }

  LambdaApiGatewayInvoke:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TwitterApiLambda
      Principal: apigateway.amazonaws.com

Outputs:
  WebsiteURL:
    Value: !GetAtt MyBucket.WebsiteURL
    Description: URL for website hosted on S3

