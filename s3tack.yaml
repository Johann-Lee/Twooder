Parameters: 
  TableName:
    Description: Database Table Name
    Type: String
    Default: TwooderTable
  BearerToken:
    Description: Twitter API bearer token
    Type: String
    NoEcho: true
  GithubToken:
    Description: GitHub personal access token
    Type: String
    NoEcho: true

Resources:
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: twooder-api

  GetUsers:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !GetAtt RestApi.RootResourceId
      HttpMethod: POST
      RequestParameters:
        method.request.querystring.username: true
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TwitterApiLambda.Arn}/invocations'

  Deployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApi
      StageName: v1
    DependsOn:
      - GetUsers

  TwitterApiLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: 15
      Environment:
        Variables:
          TableName: !Ref TableName
          BearerToken: !Ref BearerToken
      Code:
        ZipFile: |
          import requests
          import boto3
          import os
          import json


          def lambda_handler(event, context):
            table_name = os.environ['TableName']
            db = boto3.client('dynamodb')
            result = db.list_tables()
            if 'TableNames' not in result or len(result['TableNames']) == 0 or table_name in result['TableNames']:
              response = db.create_table(
                AttributeDefinitions=[
                  {
                    'AttributeName': 'Username',
                    'AttributeType': 'S'
                  }
                ],
                TableName=table_name,
                KeySchema=[
                  {
                    'AttributeName': 'Username',
                    'KeyType': 'HASH'
                  }
                ],
                ProvisionedThroughput={
                  'ReadCapacityUnits': 5,
                  'WriteCapacityUnits': 5
                }
              )

            bearer_token = 'Bearer ' + os.environ['BearerToken']
            username = event['queryStringParameters']['username']

            res = requests.get("https://api.twitter.com/2/users/by?",
                               params={'usernames': username},
                               headers={'Authorization': bearer_token})

            user = res.json()['data'][0]

            if user is None:
              return {'statusCode': 400, 'body': None}

            user_id = user['id']

            if user_id is None:
              return {'statusCode': 400, 'body': None}

            url = "https://api.twitter.com/2/users/" + user_id + "/tweets?max_results=30"
            res = requests.get(url, headers={'Authorization': bearer_token})

            print(res)
            tweets = res.json()['data']

            comprehend = boto3.client('comprehend')

            total_positive = 0
            total_negative = 0
            total_neutral = 0

            for tweet in tweets:
              comprehend_result = comprehend.detect_sentiment(Text=tweet['text'], LanguageCode='en')
              total_positive = total_positive + comprehend_result['SentimentScore']['Positive']
              total_negative = total_negative + comprehend_result['SentimentScore']['Negative']
              total_neutral = total_neutral + comprehend_result['SentimentScore']['Neutral']

            positive = total_positive / len(tweets)
            negative = total_negative / len(tweets)
            netural = total_neutral / len(tweets)

            return {
              'statusCode': 200,
              'body': json.dumps({
                'positive': positive,
                'negative': negative,
                'neutral': netural
              })
            }

  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TwitterApiLambda
      Principal: apigateway.amazonaws.com
      
  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: Twooder
      Repository: https://github.com/swen-514-team-7/twooder-web-app
      OauthToken: !Ref GithubToken
      EnvironmentVariables:
        - Name: apiUrl
          Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/v1/"
      BuildSpec: |-
        version: 0.1
        frontend:
          phases:
            preBuild:
              commands:
                - npm install
            build:
              commands:
                - npm run build
          artifacts:
            baseDirectory: build
            files:
              - '**/*'
      
  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      BranchName: master
      AppId: !GetAtt AmplifyApp.AppId
      EnableAutoBuild: true
      Tags:
        - Key: Name
          Value: twooder-master
        - Key: Branch
          Value: master
